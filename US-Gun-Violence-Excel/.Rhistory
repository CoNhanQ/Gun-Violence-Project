geom_line(aes(group = 1), size = 2) +
geom_point(size =5)
xgrid <- with(df,seq(min(x), max(x), length = 50))
interp <- data.frame(
x = xgrid,
y = approx(df$x, df$y, xout = xgrid)$y,
color = approx(df$x, df$color, xout = xgrid)$y
)
ggplot(interp, aes(x,y,color = color)) +
geom_line(size = 2) +
geom_point(data = df, size =5)
ggplot(mpg, aes(class)) +
geom_bar() + coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
airlines
planes %>%
count(tailnum) %>%
filter(n >1)
weather %>%
count(year,month,day,hour,origin) %>%
filter(n>1)
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
flights2 %>%
select(-origin, -dest) %>%
mutate(name = airlines$name[match(carrier, airlines$carrier)])
x <- tribble(
~key, ~val_x,
1 , "x1",
2 , "x2",
3 , "x3"
)
y <- tribble(
~key, ~val_y,
1 , "y1",
2, "y2",
4, "y3"
)
x %>%
inner_join(y, by = "key")
flight2 %>%
left_join(weather)
flights2 %>%
left_join(weather)
flights 2 %>%
flights2 %>%
left_join(planes, by = "tailnum")
flights2 %>%
left_join(airports, c("dest" = "faa"))
flights2 %>%
left_join(airports, c("origin" = "faa"))
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
top_dest
flights %>%
filter(dest %in% top_dest$dest)
flights %>%
semi_join(top_dest)
flights %>%
anti_join(planes, by = "tailnum") %>%
count(tailnum, sort = TRUE)
knitr::opts_chunk$set(echo = TRUE)
y <- c(18,11,16)
df <- data.frame(x = 1:3, y = y, se = c(1.2,0.5, 1.0))
base <- ggplot(df, aes(x,y, ymin = y - se, ymax = y + se))
base + geom_crossbar()
base + geom_pointrange()
base + geom_smooth(stat = "identity")
df
ggplot(midwest, aes(percwhite, percbelowpoverty)) +
geom_point()
ggplot(midwest, aes(oercwhite, percbelowpoverty)) +
geom_point(aes(size = poptotal / 1e6)) +
scale_size_area("population\n(millions)", breaks = c(0.5,1,2,4))
ggplot(midwest, aes(percwhite, percbelowpoverty)) +
geom_point(aes(size = poptotal / 1e6)) +
scale_size_area("population\n(millions)", breaks = c(0.5,1,2,4))
ggplot(midwest, aes(percwhite, percbelowpoverty)) +
geom_point() +
geom_smooth(method = lm, size =1 )
ggplot(midwest, aes(percwhite, percbelowpoverty)) +
geom_point(aes(size = poptotal / 1e6)) +
geom_smooth(aes(weight = poptotal), method = lm, size = 1) +
scale_size_area(guide = "none")
ggplot(midwest, aes(percbelowpoverty)) +
geom_histogram(binwidth = 1) +
ylab("Counties")
ggplot(midwest, aes(percbelowpoverty)) +
geom_histogram(aes(weight = poptotal), binwidth = 1) +
ylab("Population (1000s)")
diamonds
ggplot(diamonds, aes(depth)) +
geom_histogram()
ggplot(diamonds, aes(depth)) +
geom_histogram(binwidth = 0.1) +
xlim(55,70)
ggplot(diamonds, aes(depth)) +
geom_freqpoly(aes(color = cut), binwidth = 0.1, na.rm = TRUE) +
xlim(58, 68) +
theme(legend.position =  "none")
ggplot(diamonds, aes(depth)) +
geom_histogram(aes(fill = cut), binwidth = 0.1, position = "fill", na.rm = TRUE) +
xlim(58,68) +
theme(legend.position = "none")
ggplot(diamonds, aes(depth)) +
geom_density(na.rm = TRUE) +
xlim(58,68) +
theme(legend.position = "none")
ggplot(diamonds, aes(depth, fill = cut, color = cut)) +
geom_density(alpha = 0.2, na.rm = TRUE) +
xlim(58,68) +
theme(legend.position = "none")
ggplot(diamonds, aes(clarity, depth)) +
geom_boxplot()
ggplot(diamonds, aes(carat,depth)) +
geom_boxplot(aes(group = cut_width(carat, 0.1))) +
xlim(NA, 2.05)
ggplot(diamonds, aes(clarity, depth)) +
geom_violin()
ggplot(diamonds, aes(carat, depth)) +
geom_violin(aes(group = cut_width(carat, 0.1))) +
xlim(NA, 2.05)
ggplot(diamonds, aes(carat, depth)) +
geom_violin(aes(group = cut_width(carat, 0.1))) +
xlim(NA, 2.05)
ggplot(diamonds, aes(color)) +
geom_bar()
ggplot(diamonds, aes(color, price)) +
geom_bar(stat = "summary_bin", fun = mean)
ggplot(diamonds, aes(table, depth)) +
geom_bin2d(binwidth = 1, na.rm = TRUE) +
xlim(50,70) +
ylim(50,70)
ggplot(diamonds, aes(table, depth, z = price)) +
geom_raster(binwidth = 1, stat = "summary_2d", fun = mean,
na.rm = TRUE)
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_contour(aes(z = density, color = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
geom_raster(aes(fill = density))
small <- fauthfuld[seq(1, nrow(faithfuld), by = 10), ]
small <- faithfuld[seq(1, nrow(faithfuld), by = 10), ]
ggplot(small, aes(eruptions, waiting)) +
geom_point(aes(size = density), alpha = 1/3) +
scale_size_area()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
string1 <- "This is a string"
string2 <- 'if I want to include a "quote" inside a string, I use single quotes"
string1 <- "This is a string"
string2 <- 'if I want to include a "quote" inside a string, I use single quotes'
double_quote <- "\"" # or '"'
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c(
"Good", time_of_day, " ", name,
if (birthday) " and Happy BIRTHDAY",
"."
)
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and Happy BIRTHDAY",
"."
)
x <- c("Apple", "Banana", "Pear")
str_sub(x,1,3)
str_view(x, "an")
x <- c("apple", "banana", "pear")
str_view(x, "^a")
str_view(x, "a$")
knitr::opts_chunk$set(echo = TRUE)
x1 <- c("Dec", "Apr", "Jan", "Mar")
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
y1 <- factor(x1, levels = month_levels)
y1
sort(y1)
y2 <- parse_factor(x2, levels = month_levels)
library(tidyverse)
gss_cat
gss_cat %>%
count(race)
ggplot(gss_cat, aes(race)) +
geom_bar()
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
relig_summary <- gss_cat %>%
group_by(relig) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(relig_summary, aes(tvhours, relig)) + geom_point()
ggplot(relig_summary, aes(tvhours, fct_reorder(relig, tvhours))) +
geom_point()
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
rincome_summary <- gss_cat %>%
group_by(rincome) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n=n()
)
ggplot(rincome_summary, aes(age, fct_reorder(rincome, age))) + geom_point()
ggplot(rincome_summary, aes(age, fct_relevel(rincome,"Not applicable"))) +
geom_point()
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = n / sum(n))
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
gss_cat %>% mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar()
gss_cat %>% count(partyid)
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat"
)) %>%
count(partyid)
#> # A tibble: 10 x 2
#>   partyid                   n
#>   <fct>                 <int>
#> 1 No answer               154
#> 2 Don't know                1
#> 3 Other party             393
#> 4 Republican, strong     2314
#> 5 Republican, weak       3032
#> 6 Independent, near rep  1791
#> # â€¦ with 4 more rows
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mi_counties <- map_data("county", "michigan") %>%
select(lon = long, latm group, id = subregion)
mi_counties <- map_data("county", "michigan") %>%
select(lon = long, lat,group, id = subregion)
head(mi_counties)
ggplot(mi_counties, aes(lon, lat)) +
geom_point(size = .25, show.legend = FALSE) +
coord_quickmap()
ggplot(mi_counties, aes(lon, lat)) +
geom_point(size = .25, show.legend = FALSE) +
coord_quickmap()
ggplot(mi_counties, aes(lon, lat, group = group)) +
geom_polygon(fill = "white", color = "grey50") +
coord_quickmap()
library(ozmaps)
library(sf)
oz_states <- ozmaps::ozmap_states
oz_states
ggplot(oz_states) +
geom_sf() +
corrd_sf()
ggplot(oz_states) +
geom_sf() +
coord_sf()
oz_states <- ozmaps::ozmap_states %>% filter(NAME != "Other Territories")
oz_votes <- rmapshaper::ms_simplify(ozmaps::abs_ced)
ggplot() +
geom_sf(data = oz_states, mapping = aes(fill = NAME), show.legend = FALSE) +
geom_sf(data = oz_votes, fill = NA) +
coord_sf()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(nycflights13)
flights %>%
select(year, month, day, hour, minute)
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
make_datetime_100 <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_arr_time)
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400)
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600)
as_datetime(today())
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarise(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
pryr::object_size(diamonds)
function(x,y,op) {
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!"))
}
function(5,6,plus)
G = function(x,y,op) {
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!"))
}
G(5,6,plus)
G(5,6,op = plus)
G(5,6)
G(5,6,+)
G(5,6,plus)
G(5,6,5 + 6)
(G(5,6,5 + 6))
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x , y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intercept = a1, slope = a2) data = models, alpha = 1/4) +
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7,1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1,a2) {
measure_distance(c(a1,a2), sim1)
}
sim1_dist <- function(a1,a2) {
measure_distance(c(a1,a2), sim1)
}
models <- models %>%
mutate(dist = purr::map2_dbl(a1,a2, sim1_dist))
sim1_dist <- function(a1,a2) {
measure_distance(c(a1,a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1,a2, sim1_dist))
models
install.packages("RWeka")
library("RWeka")
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
blood <- factor(c("O", "AB", "A"),
levels = c("A","B","AB","O"))
blood
symptoms <- factor(c("SEVERE", "MILD","MODERATE"),
levels = c("MILD","MODERATE","SEVERE"),
ordered = TRUE)
symptoms <- factor(c("SEVERE", "MILD","MODERATE"),
levels = c("MILD","MODERATE","SEVERE"),
ordered = TRUE)
symptoms
flu_status <- c(FALSE, FALSE, TRUE)
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
subject1
pt_data <- data.frame(subject_name, temperature, flu_status, gender, blood, symptoms, stringsAsFactors = FALSE)
pt_data
pt_data$subject_name
library("RWeka")
usedcars <- read.csv("Machine-Learning-with-R-Third-Edition/chapter02/usedcars.csv", stringsAsFactors = FALSE)
str(usedcars)
summary(usedcars$year)
summary(usedcars[c("price", "mileage")])
mean(c(36000,44000,56000))
range(usedcar$price)
range(usedcars$price)
diff(range(usedcars$price))
IQR(usedcars$price)
boxplot(usedcars$price, main = "Boxplot of Used Car Prices", ylab = "Price ($)")
boxplot(usedcars$mileage, main = "Boxplot of Used Car Mileage", ylab = "Odometer (mi.)")
hist(usedcars$price, main = "Histogram of Used Car Prices",
xlab = "Price ($)")
hist(usedcars$mileage, main = "Histogram of Used Car mileage",
xlab = "Odometer (mi.)")
var(usedcars$price)
table(usedcars$year)
table(usedcars$model)
table(usedcars$color)
model_table <- table(usedcars$model)
prop.table(model_table)
plot(x = usedcars$mileage, y = usedcars$price,
main = "Scatterplot of Price vs. Mileage",
xlab = "Used Car Odometer (mi.)",
ylab = "Used Car Price ($)")
install.packages("gmodels")
library(gmodels)
usedcars$conservative <-
usedcars$color %in% c("Black", "Gray", "Silver", "White")
usedcars$conservative <-
usedcars$color %in% c("Black", "Gray", "Silver", "White")
table(usedcars$conservative)
CrossTable(x = usedcars$model, y = usedcars$conservative)
library("class")
library("gmodels")
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
str(wbcd)
wbcd <- wbcd[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
normalize <- function(x){
return ((x - min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
setwd("C:/Users/15105/Desktop/Gun-Violent-Project/US-Gun-Violence-Excel")
Gviolence <- read.csv("State&Victim.csv", stringsAsFactors = FALSE)
Gviolence <- read.csv("/State&Victim.csv", stringsAsFactors = FALSE)
Gviolence <- read.csv("./State&Victim.csv", stringsAsFactors = FALSE)
setwd("C:/Users/15105/Desktop/Gun-Violent-Project/US-Gun-Violence-Excel")
Gviolence <- read.csv("./State&Victim.csv", stringsAsFactors = FALSE)
Gviolence <- read.csv("/State&Victim.csv", stringsAsFactors = FALSE)
Gviolence <- read.csv("States&Victim.csv", stringsAsFactors = FALSE)
str(Gviolence)
Gviolence <- read.csv("Clean-US-Gun-Violence.csv", stringsAsFactors = FALSE)
str(Gviolence)
summary(Gviolence)
Gviolence <- Gviolence[-1]
summary(Gviolence)
str(Gviolence)
str(Gviolence)
Gviolence <- Gviolence[c[-1,-5]]
Gviolence <- Gviolence[-1]
summary(Gviolence[c("killed","injured")])
